{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./defaultValues.ts","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts","webpack:///./dataTransformator.ts","webpack:///./Trace.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","defaultValues","defaultTrace","mapping","x","y","z","text","color","size","show","line","markers","settings","width","dash","shape","marker","symbol","colorscale","sizemode","sizemin","sizeref","showscale","color_option","defaultQueryDescription","columnNames","dataColumn","xColumn","yColumn","lonColumn","latColumn","queryTitle","queryNumber","defaultConfig","pconfig","loadFromCDN","showAnnotations","fixScale","traces","type","fill","displayModeBar","layout","showlegend","legend","orientation","barmode","dragmode","font","family","xaxis","autorange","fixedrange","showgrid","zeroline","rangemode","yaxis","_sdk","_SeriesWrapper","_editor","_libLoader","_anno","_dataTransformator","_defaultValues","a","Plotly","PlotlyPanelCtrl","_super","$scope","$injector","$window","uiSegmentSrv","annotationsSrv","_this","this","debug","defaultPanelConfigs","dataList","pointsSelected","annotations","AnnoInfo","seriesByKey","Map","seriesHash","doResize","_lodash2","debounce","window","getComputedStyle","graphDiv","display","rect","getBoundingClientRect","height","redraw","console","log","warn","deepCopyWithTemplates","obj","isArray","map","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","_hadAnno","initialized","defaultsDeep","cfg","events","loadPlotly","then","on","onRender","onDataReceived","onDataError","onResize","onDataSnapshotLoad","onRefresh","refresh","onInitEditMode","__extends","$inject","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","err","series","clear","render","otherPanelInFullscreenMode","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","processConfigMigration","configVersion","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","old","show_1","indexOf","lines","trace","version","onPanelInitialized","getProcessedLayout","scaleanchor","title","b","pad","labelStyle","style","_jquery2","parse","scale","toString","gridcolor","mapbox","domain","center","lon","lat","zoom","range","oldLayout","drawPlot","options","showLink","displaylogo","modeBarButtonsToRemove","newTraces","react","onPointsSelected","data","points","displayQueries","snapshot","firstTraces","secondTraces","filter","dataRow","index","querieDescription","queriesDescription","element","Number","graphType","_a","dataTransformator","toTraces","sortedSeries","allColumnNames","dataColumnNames","all","serie","xVals","String","yVals","push","_b","toLatLonTraces","mapTrace","barTrace","dataWarnings","visibility_1","visible","finfo","useRefID_1","targets","sidx","refId","fromCharCode","charCodeAt","columns","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","error","getAllKeys","set","hchanged","updateMappings","selectTrace","traceIndex","annotationPromise","Promise","resolve","shapes","getAnnotations","dashboard","results","hasAnno","update","loadIfNecessary","res","purge","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","count","datapoints","arr","toArray","Array","vals","table","rows","col","Error","row","u","h","REMOVE_KEY","axis","queryIndex","selectQuery","defaultMappings","time","changed","defaults","onUpdateAxis","label","segment","queries","cloneDeep","query","createQuery","queryDescription","q","number","removeCurrentQuery","splice","createTraceName","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","getSeriesSegs","withRemove","reject","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","isFull","_scriptjs2","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","ids","delay","scripts","every","ar","fn","j","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","id","join","queue","loopFn","item","list","callback","dset","split","each","path","force","test","loading","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","str","ready","deps","req","missing","dep","assign","arguments","apply","hoverinfo","annotation","iconColor","xref","yref","x0","y0","x1","y1","layer","fillcolor","opacity","_Trace","normalize","newMin","newMax","min","max","delta","newDelta","dataSet","xValueFilter","ident","GeoPoint","MapKey","graphPoints","mapPoints","dataColumn_1","xColumn_1","latColumn_1","lonColumn_1","dbRequestRow","dataRaw","dataVal","xRaw","xVal","lonRaw","latRaw","point","lon_1","lat_1","exist","len","maxHour","_pointVal","pointKey","X","Y","pointVal","normalizedData","traceDataColumn_1","xValueColumn_1","yValueColumn_1","sort","obj1","obj2","obj1order","obj2order","traceName","traceX","traceY","Date","getHours","Trace","prevTraceX","from","values","s1","s2","localeCompare","numeric"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export class defaultValues {\n    public static defaultTrace = {\n        mapping: {\n            x: null,\n            y: null,\n            z: null,\n            text: null,\n            color: null,\n            size: null,\n        },\n        show: {\n            line: true,\n            markers: true,\n        },\n        settings: {\n            line: {\n                color: '#005f81',\n                width: 6,\n                dash: 'solid',\n                shape: 'linear',\n            },\n            marker: {\n                size: 15,\n                symbol: 'circle',\n                color: '#33B5E5',\n                colorscale: 'YlOrRd',\n                sizemode: 'diameter',\n                sizemin: 3,\n                sizeref: 0.2,\n                line: {\n                    color: '#DDD',\n                    width: 0,\n                },\n                showscale: false,\n            },\n            color_option: 'ramp',\n        },\n    };\n\n    public static defaultQueryDescription = {\n        columnNames: {\n            dataColumn: \"\",\n            xColumn: \"\",\n            yColumn: \"\",\n            lonColumn: \"\",\n            latColumn: \"\",\n        },\n        queryTitle: \"\",\n        queryNumber: 0,\n        color: \"gray\"\n    }\n\n    public static defaultConfig = {\n        pconfig: {\n            loadFromCDN: false,\n            showAnnotations: true,\n            fixScale: '',\n            traces: [defaultValues.defaultTrace],\n            settings: {\n                type: 'bar',\n                fill: 'None',\n                mode: 'None',\n                displayModeBar: true,\n            },\n            // dataColumnNames: {\n            //     dataColumn: '',\n            //     xColumn: '',\n            //     yColumn: ''\n            // },\n            // queriesDescription: [\n            //     {\n            //         columnNames: {\n            //             dataColumn: \"count\",\n            //             xColumn: \"simulation-hour\",\n            //             lonColumn: \"lon\",\n            //             latColumn: \"lat\",\n            //         },\n            //         queryTitle: \"count of events\",\n            //         queryNumber: \"1\",\n            //         color: 'green'\n            //     },\n            //     {\n            //         columnNames: {\n            //             dataColumn: \"averageLoad\",\n            //             xColumn: \"simulation-hour\",\n            //             lonColumn: \"lon\",\n            //             latColumn: \"lat\"\n            //         },\n            //         queryTitle: \"average charging load\",\n            //         queryNumber: \"0\",\n            //         color: 'blue'\n            //     },\n            // ],\n            layout: {\n                showlegend: false,\n                legend: {\n                    orientation: 'h',\n                },\n                barmode: 'stack',\n                dragmode: 'zoom', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n                //hovermode: 'compare', // 'closest',\n                font: {\n                    family: '\"Open Sans\", Helvetica, Arial, sans-serif',\n                },\n                xaxis: {\n                    autorange: true,\n                    fixedrange: false,\n                    showgrid: true,\n                    zeroline: false,\n                    type: 'auto',\n                    rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n                },\n                yaxis: {\n                    autorange: true,\n                    fixedrange: false,\n                    showgrid: true,\n                    zeroline: false,\n                    type: 'linear',\n                    rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n                },\n            },\n        },\n    };\n}","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport $ from 'jquery';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport { EditorHelper } from './editor';\n\nimport { loadPlotly, loadIfNecessary } from './libLoader';\nimport { AnnoInfo } from './anno';\nimport { Trace } from './Trace';\nimport { dataTransformator } from './dataTransformator';\nimport { defaultValues } from './defaultValues';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n  debug = false\n\n  initialized: boolean;\n\n  defaultPanelConfigs: any = defaultValues.defaultConfig;\n\n  graphDiv: any;\n  dataList: any[] = [];\n  pointsSelected: any = undefined;\n  annotations = new AnnoInfo();\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n\n  dataColumns: any[];\n  newTraces: any[];\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mouse: any;\n  cfg: any;\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[]; // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    // private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv\n  ) {\n    super($scope, $injector);\n\n    this.initialized = false;\n\n    // defaults configs\n    _.defaultsDeep(this.panel, this.defaultPanelConfigs);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n      if (this.debug) { console.log('Plotly', v); }\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = this.height;\n      Plotly.redraw(this.graphDiv);\n\n      if (this.debug) { console.log('redraw with layout:', this.layout); }\n    }\n  }, 50);\n\n  onResize() {\n    if (this.debug) {\n      console.log('onResize', this.graphDiv, this.layout, Plotly, this.graphDiv && this.layout && Plotly)\n    }\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations.clear();\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Queries', 'public/plugins/natel-plotly-panel/partials/tab_queries.html', 3);\n    // this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 4);\n    // this.editorTabIndex = 1;\n\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      if (this.debug) { console.log('RESIZE in editor'); }\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n    if (this.debug) { console.log('Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion); }\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    if (this.debug) { console.log('After Migration:', cfg); }\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    // this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    // Fixed scales\n    if (this.cfg.fixScale) {\n      if ('x' === this.cfg.fixScale) {\n        layout.yaxis.scaleanchor = 'x';\n      } else if ('y' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'y';\n      } else if ('z' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'z';\n        layout.yaxis.scaleanchor = 'z';\n      }\n    }\n\n    layout.margin = {\n      l: layout.yaxis.title ? 50 : 35,\n      r: 5,\n      t: 0,\n      b: layout.xaxis.title ? 65 : 30,\n      pad: 2,\n    };\n\n    // get the css rule of grafana graph axis text\n    const labelStyle = this.getCssRule('div.flot-text');\n    if (labelStyle) {\n      let color = labelStyle.style.color;\n      if (!layout.font) {\n        layout.font = {};\n      }\n      layout.font.color = color;\n\n      // make the grid a little more transparent\n      color = $.color\n        .parse(color)\n        .scale('a', 0.22)\n        .toString();\n\n      // set gridcolor (like grafana graph)\n      layout.xaxis.gridcolor = color;\n      layout.yaxis.gridcolor = color;\n    }\n\n    // for scattermapbox: display two plots instead of one\n    // one plot is bars and another is scattermapbox\n    if (this.cfg.settings.type === 'scattermapbox') {\n      layout.mapbox = {\n        domain: {\n          x: [0, 1],\n          y: [0, 0.8]\n        },\n        center: { lon: -122.4, lat: 37.75 },\n        style: \"open-street-map\",\n        zoom: 11\n      }\n      layout.xaxis.domain = [0, 1]\n      layout.yaxis.domain = [0.85, 1]\n    }\n\n    delete layout.scene;\n    delete layout.zaxis;\n    delete layout.xaxis.range;\n    delete layout.yaxis.range;\n\n    let oldLayout = this.graphDiv.layout\n    if (oldLayout && oldLayout.mapbox && oldLayout.mapbox.center) {\n      layout.mapbox.center = oldLayout.mapbox.center\n      layout.mapbox.zoom = oldLayout.mapbox.zoom\n    }\n    if (oldLayout && oldLayout.xaxis && oldLayout.yaxis && oldLayout.xaxis.range && oldLayout.yaxis.range) {\n      layout.xaxis.range = oldLayout.xaxis.range\n      layout.yaxis.range = oldLayout.yaxis.range\n    }\n    if (oldLayout) {\n      layout.dragmode = oldLayout.dragmode\n    }\n\n    return layout;\n  }\n\n  drawPlot() {\n    const s = this.cfg.settings;\n    const options = {\n      showLink: false,\n      displaylogo: false,\n      // scrollZoom: true,\n      displayModeBar: s.displayModeBar,\n      modeBarButtonsToRemove: ['sendDataToCloud', 'lasso2d'], //, 'select2d', 'pan2d']\n    };\n\n    this.layout = this.getProcessedLayout();\n\n    if (this.debug) { console.log(\"draw plot with\", 'data', this.newTraces, 'layout', this.layout, 'options', options); }\n    Plotly.react(this.graphDiv, this.newTraces, this.layout, options);\n  }\n\n  onPointsSelected(data) {\n    if (!data || !data.points || !data.points.length || data.points[0].data.type != 'bar') {\n      return;\n    }\n\n    this.pointsSelected = {}\n    data.points.forEach(p => this.pointsSelected[p.x] = true)\n\n    this.displayQueries()\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n      this.drawPlot();\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        this.onPointsSelected(data);\n        if (this.debug) { console.log('on click', data); }\n      });\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        this.onPointsSelected(data);\n        if (this.debug) { console.log('on select', data); }\n      });\n\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n    } else {\n      if (this.debug) { console.log('Not initialized yet!'); }\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  _hadAnno = false;\n\n  displayQueries() {\n    let firstTraces: any[] = []\n    let secondTraces: any[] = []\n\n    let pointsSelected = this.pointsSelected\n    let filter = function (value) {\n      if (pointsSelected) {\n        return value in pointsSelected\n      }\n      return true\n    }\n\n    /*\n    if (this.dataList.length === 1) {\n      let row = this.dataList[0]\n\n      if (!this.cfg.queriesDescription || this.cfg.queriesDescription.length < 1) {\n        this.cfg.queriesDescription = [_.cloneDeep(defaultValues.defaultQueryDescription)];\n      }\n\n      if (this.cfg.dataColumnNames.dataColumn && this.cfg.dataColumnNames.dataColumn != '?') {\n        this.cfg.queriesDescription[0].columnNames.dataColumn = this.cfg.dataColumnNames.dataColumn\n        this.cfg.queriesDescription[0].columnNames.xColumn = this.cfg.dataColumnNames.xColumn\n        this.cfg.queriesDescription[0].columnNames.yColumn = this.cfg.dataColumnNames.yColumn\n      } else {\n        this.cfg.queriesDescription[0].columnNames.dataColumn = row.columns[2].text\n        this.cfg.queriesDescription[0].columnNames.xColumn = row.columns[1].text\n        this.cfg.queriesDescription[0].columnNames.yColumn = row.columns[3].text\n      }\n\n      // console.log('result', this.cfg.queriesDescription[0].columnNames)\n    }\n    */\n\n    this.dataList.forEach((dataRow, index) => {\n\n      var querieDescription: any;\n\n      this.cfg.queriesDescription.forEach(element => {\n        let queryNumber: number = Number(element.queryNumber)\n        if (queryNumber == index) {\n          querieDescription = element\n        }\n      });\n\n      let queryTitle = querieDescription.queryTitle\n      let columnNames = querieDescription.columnNames\n      let graphType = this.cfg.settings.type;\n      if (!dataRow) {\n        this.dataWarnings.push(\"no data, nothing to display\")\n      } else if (!querieDescription) {\n        this.dataWarnings.push(\"no data description, can't display\")\n      } else if (graphType === 'scatter' || graphType === 'bar') {\n        let { sortedSeries, allColumnNames } = dataTransformator.toTraces(dataRow, columnNames)\n\n        this.cfg.dataColumnNames.all = allColumnNames\n\n        sortedSeries.forEach((serie: Trace) => {\n          let xVals = serie.x.map(String)\n          let yVals = serie.y\n\n          firstTraces.push({\n            x: xVals,\n            y: yVals,\n            type: this.cfg.settings.type,\n            mode: this.cfg.settings.mode,\n            fill: this.cfg.settings.fill,\n            name: serie.name\n          })\n        })\n      } else if (graphType === 'scattermapbox') {\n        let { mapTrace, barTrace, allColumnNames } = dataTransformator.toLatLonTraces(dataRow, columnNames, filter)\n\n        this.cfg.dataColumnNames.all = allColumnNames\n\n        barTrace.marker.color = querieDescription.color\n        barTrace.name = queryTitle\n        firstTraces.push(barTrace)\n\n        mapTrace.marker.color = querieDescription.color\n        mapTrace.name = queryTitle\n        secondTraces.push(mapTrace)\n      } else {\n        this.dataWarnings.push(\"UNEXPECTED GRAPH TYPE: \" + graphType);\n      }\n    });\n\n    this.newTraces = []\n\n    if (this.graphDiv.data) {\n      let visibility: any[] = []\n      this.graphDiv.data.forEach(trace => visibility.push(trace.visible))\n\n      var index = 0\n\n      firstTraces.forEach(trace => {\n        trace.visible = visibility[index]\n        index++\n        this.newTraces.push(trace)\n      })\n\n      secondTraces.forEach(trace => {\n        trace.visible = visibility[index]\n        index++\n        this.newTraces.push(trace)\n      })\n    } else {\n      firstTraces.forEach(trace => this.newTraces.push(trace))\n      secondTraces.forEach(trace => this.newTraces.push(trace))\n    }\n\n    // this.onConfigChanged();\n    // this.render();\n\n    this.drawPlot();\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList || dataList.length < 1) {\n      if (this.debug) { console.log('data is empty:', dataList); }\n      return;\n    }\n\n    this.dataList = dataList;\n\n    this.displayQueries();\n\n    // return;\n\n    const finfo: SeriesWrapper[] = [];\n    let seriesHash = '/';\n    if (dataList && dataList.length > 0) {\n      const useRefID = dataList.length === this.panel.targets.length;\n      dataList.forEach((series, sidx) => {\n\n        let refId = '';\n        if (useRefID) {\n          refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n          if (!refId) {\n            refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    let annotationPromise = Promise.resolve();\n    if (!this.cfg.showAnnotations || this.is3d()) {\n      this.annotations.clear();\n      if (this.layout) {\n        if (this.layout.shapes) {\n          this.onConfigChanged();\n        }\n        this.layout.shapes = [];\n      }\n    } else {\n      annotationPromise = this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          const hasAnno = this.annotations.update(results);\n          if (this.layout) {\n            if (hasAnno !== this._hadAnno) {\n              this.onConfigChanged();\n            }\n            this.layout.shapes = this.annotations.shapes;\n          }\n          this._hadAnno = hasAnno;\n        });\n    }\n\n    // Load the real data changes\n    annotationPromise.then(() => {\n      // this._updateTraceData();\n      this.render();\n    });\n  }\n\n  /*\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n    // This will update all trace settings *except* the data\n    _updateTracesFromConfigs() {\n      this.dataWarnings = [];\n  \n      // Make sure we have a trace\n      if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n        this.cfg.traces = [_.cloneDeep(defaultValues.defaultTrace)];\n      }\n  \n      const is3D = this.is3d();\n      this.traces = this.cfg.traces.map((tconfig, idx) => {\n        const config = this.deepCopyWithTemplates(tconfig) || {};\n        _.defaults(config, defaultValues.defaultConfig);\n        const mapping = config.mapping;\n  \n        const trace: any = {\n          name: config.name || EditorHelper.createTraceName(idx),\n          type: this.cfg.settings.type,\n          // mode: 'markers+lines', // really depends on config settings\n          __set: [], // { key:? property:? }\n        };\n  \n        let mode = '';\n        if (config.show.markers) {\n          mode += '+markers';\n          trace.marker = config.settings.marker;\n  \n          delete trace.marker.sizemin;\n          delete trace.marker.sizemode;\n          delete trace.marker.sizeref;\n  \n          if (config.settings.color_option === 'ramp') {\n            this.__addCopyPath(trace, mapping.color, 'marker.color');\n          } else {\n            delete trace.marker.colorscale;\n            delete trace.marker.showscale;\n          }\n        }\n  \n        if (config.show.lines) {\n          mode += '+lines';\n          trace.line = config.settings.line;\n        }\n  \n        // Set the text\n        this.__addCopyPath(trace, mapping.text, 'text');\n        this.__addCopyPath(trace, mapping.x, 'x');\n        this.__addCopyPath(trace, mapping.y, 'y');\n  \n        if (is3D) {\n          this.__addCopyPath(trace, mapping.z, 'z');\n        }\n  \n        // Set the trace mode\n        if (mode) {\n          trace.mode = mode.substring(1);\n        }\n        return trace;\n      });\n    }\n  \n    // Fills in the required data into the trace values\n    _updateTraceData(force = false): boolean {\n      if (!this.series) {\n        // console.log('NO Series data yet!');\n        return false;\n      }\n  \n      if (force || !this.traces) {\n        this._updateTracesFromConfigs();\n      } else if (this.traces.length !== this.cfg.traces.length) {\n        console.log(\n          'trace number mismatch.  Found: ' +\n          this.traces.length +\n          ', expect: ' +\n          this.cfg.traces.length\n        );\n        this._updateTracesFromConfigs();\n      }\n  \n      // Use zero when the metric value is missing\n      // Plotly gets lots of errors when the values are missing\n      let zero: any = [];\n      this.traces.forEach(trace => {\n        if (trace.__set) {\n          trace.__set.forEach(v => {\n            const s = this.seriesByKey.get(v.key);\n            let vals: any[] = zero;\n            if (s) {\n              vals = s.toArray();\n              if (vals && vals.length > zero.length) {\n                zero = Array.from(Array(3), () => 0);\n              }\n            } else {\n              if (!this.error) {\n                this.error = '';\n              }\n              this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n            }\n            if (!vals) {\n              vals = zero;\n            }\n            _.set(trace, v.path, vals);\n          });\n        }\n      });\n  \n      return true;\n    }\n  */\n\n  onConfigChanged() {\n    // Force reloading the traces\n    // this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        if (!this.cfg.showAnnotations) {\n          this.annotations.clear();\n        }\n\n        this.drawPlot();\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => this.mouse = evt);\n  }\n}\n\nexport { PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl };\n","import _ from 'lodash';\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    const idx = 'time' === this.value ? 1 : 0;\n    return _.map(this.series.datapoints, arr => {\n      return arr[idx];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unkonwn Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","import _ from 'lodash';\n\nimport { PlotlyPanelCtrl } from './module';\nimport { defaultValues } from './defaultValues';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  debug = false;\n\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n  trace: any; // Trace Config\n\n  queryIndex = 0;\n  queries: any[];\n  query: any;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n    this.selectQuery(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, defaultValues.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Queries\n  //-----------------------------------------------------------------------\n\n  selectQuery(index: number) {\n    this.queries = this.ctrl.cfg.queriesDescription;\n\n    if (!this.queries || this.queries.length < 1) {\n      this.queries = this.ctrl.cfg.queriesDescription = [_.cloneDeep(defaultValues.defaultQueryDescription)];\n    }\n\n    if (index >= this.queries.length) {\n      index = this.queries.length - 1;\n    }\n\n    this.query = this.queries[index]\n    this.queryIndex = index;\n\n    if (this.debug) {\n      console.log('query select', 'editor:', this);\n    }\n  }\n\n  createQuery() {\n    var queryDescription: any = _.cloneDeep(defaultValues.defaultQueryDescription)\n\n    var queryNumber: number = 0\n    this.queries.forEach(q => {\n      let number: number = Number(q.queryNumber)\n      if (number > queryNumber) {\n        queryNumber = number\n      }\n    })\n\n    if (this.queries.length > 0) {\n      queryNumber += 1\n    }\n\n    queryDescription.queryNumber = queryNumber\n    this.ctrl.cfg.queriesDescription.push(queryDescription)\n    this.selectQuery(queryNumber)\n    this.ctrl.refresh();\n\n    if (this.debug) {\n      console.log('query create', 'new', queryDescription, 'editor:', this)\n    }\n  }\n\n  removeCurrentQuery() {\n    if (!this.query.queryNumber || this.queries.length < 1) {\n      return;\n    }\n\n    for (let i = 0; i < this.ctrl.cfg.queriesDescription.length; i++) {\n      if (this.query.queryNumber === this.ctrl.cfg.queriesDescription[i].queryNumber) {\n        this.ctrl.cfg.queriesDescription.splice(i, 1);\n        if (i >= this.ctrl.cfg.queriesDescription.length) {\n          i = this.ctrl.cfg.queriesDescription.length - 1;\n        }\n\n        this.selectQuery(i);\n        this.ctrl.refresh();\n\n        if (this.debug) {\n          console.log('query remove', 'editor:', this)\n        }\n        return;\n      }\n    }\n\n    this.ctrl.dataWarnings.push('can\\'t delete selected query.')\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.cloneDeep(defaultValues.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, defaultValues.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n    //console.log('Editor Info', this);\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n      // console.log('SET', key, value, this.trace.mapping);\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.cloneDeep(defaultValues.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      // console.log(\"series\", series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    // console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    console.log('Use CDN', cfg.loadFromCDN);\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  if (needsFull && !isFull) {\n    console.log('Switching to the full plotly library');\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape, Data} from 'plotly.js';\n\nexport class AnnoInfo {\n  trace: Data;\n  shapes: Shape[];\n\n  constructor() {\n    this.clear();\n  }\n\n  clear() {\n    this.shapes = [];\n    this.trace = {\n      mode: 'markers',\n      type: 'scatter',\n      hoverinfo: 'x+text',\n      x: [],\n      y: [],\n      text: [],\n      yaxis: 'y2',\n      marker: {\n        size: 15,\n        symbol: 'triangle-up',\n        color: [],\n      },\n    };\n  }\n\n  update(results: any): boolean {\n    if (!results || !results.annotations) {\n      this.clear();\n      return false;\n    }\n\n    const x: number[] = [];\n    const y: number[] = [];\n    const text: string[] = [];\n    const color: string[] = [];\n\n    this.shapes = results.annotations.map(a => {\n      x.push(a.time);\n      y.push(0);\n      text.push(a.text);\n      color.push(a.annotation.iconColor);\n\n      return {\n        type: 'line', // rect\n        xref: 'x',\n        yref: 'paper',\n        x0: a.time,\n        y0: 0,\n        x1: a.time,\n        y1: 1,\n\n        visible: true,\n        layer: 'above',\n\n        fillcolor: a.annotation.iconColor,\n        opacity: 0.8,\n        line: {\n          color: a.annotation.iconColor,\n          width: 1,\n          dash: 'dash',\n        },\n      } as Shape;\n    });\n\n    // Overwrite it with new points\n    this.trace = {...this.trace, x, y, text};\n    this.trace.marker!.color = color;\n    return x.length > 0;\n  }\n}\n","import { Trace } from \"./Trace\";\n\nexport class dataTransformator {\n    static ident = \"dataTransformator\"\n    static debug = false\n\n    static normalize(data: number[], newMin: number, newMax: number): number[] {\n        if (!data || data.length < 1 || newMax < newMin) {\n            return data;\n        }\n\n        var min = data[0];\n        var max = data[0];\n        data.forEach(value => {\n            if (max < value) {\n                max = value;\n            }\n            if (min > value) {\n                min = value;\n            }\n        })\n\n        let delta = max - min;\n        let newDelta = newMax - newMin;\n\n        if (delta != 0) {\n            return data.map(value => {\n                if (value == 0) {\n                    return 0\n                } else {\n                    return ((value - min) / delta) * newDelta + newMin\n                }\n            })\n        }\n        else {\n            return data.map(value => {\n                if (value == 0) {\n                    return 0\n                } else {\n                    return newMin\n                }\n            })\n        }\n    }\n\n    static toLatLonTraces(dataSet, dataColumnNames, xValueFilter) {\n        if (this.debug) {\n            console.log(this.ident, 'whole dataSet', dataSet);\n            console.log(this.ident, 'data columns', dataColumnNames);\n        }\n\n        class GeoPoint {\n            public lat: number = 0\n            public lon: number = 0\n            public data: number = 0\n            public key: string = \"\"\n\n            constructor(lat: number, lon: number, data: number) {\n                this.lat = lat;\n                this.lon = lon;\n                this.data = data;\n                this.key = this.MapKey(lat, lon)\n            }\n\n            public MapKey(lat: number, lon: number): string {\n                return lat.toString() + \":\" + lon.toString()\n            }\n        }\n\n        var graphPoints: Map<number, number> = new Map<number, number>();\n        var mapPoints: Map<string, GeoPoint> = new Map<string, GeoPoint>();\n        var allColumnNames = \"\";\n\n        if (dataSet.rows && dataSet.rows.length > 0) {\n            allColumnNames = dataSet.columns.map((r: { text: string; }) => r.text).join(' ')\n\n            let dataColumn = 0;\n            let xColumn = 0;\n            let latColumn = 0;\n            let lonColumn = 0;\n\n            dataSet.columns.forEach((row, index) => {\n                if (row.text == dataColumnNames.xColumn) {\n                    xColumn = index\n                }\n                if (row.text == dataColumnNames.latColumn) {\n                    latColumn = index\n                }\n                if (row.text == dataColumnNames.lonColumn) {\n                    lonColumn = index\n                }\n                if (row.text == dataColumnNames.dataColumn) {\n                    dataColumn = index\n                }\n            })\n\n            if (this.debug) {\n                console.log(this.ident, 'column names', dataColumnNames)\n                console.log(this.ident, 'columns: data', dataColumn, 'x', xColumn, 'lat', latColumn, 'lon', lonColumn)\n            }\n\n            dataSet.rows.forEach(dbRequestRow => {\n                let dataRaw = dbRequestRow[dataColumn];\n                let dataVal: number = Number(dbRequestRow[dataColumn]);\n                let xRaw = dbRequestRow[xColumn];\n                let xVal: number = Number(dbRequestRow[xColumn]);\n                let lonRaw = dbRequestRow[lonColumn];\n                let latRaw = dbRequestRow[latColumn];\n\n                if (xRaw && dataRaw) {\n                    let point = graphPoints.get(xVal)\n                    if (!point) {\n                        graphPoints.set(xVal, dataVal)\n                    } else {\n                        graphPoints.set(xVal, dataVal + point)\n                    }\n                }\n\n                if (lonRaw && latRaw && dataRaw && xRaw && xValueFilter(xRaw)) {\n                    let lon: number = Number(lonRaw)\n                    let lat: number = Number(latRaw)\n\n                    let point = new GeoPoint(lat, lon, dataVal);\n                    var exist = mapPoints.get(point.key);\n                    if (!exist) {\n                        exist = point\n                    } else {\n                        exist.data = exist.data + point.data;\n                    }\n\n                    mapPoints.set(exist.key, exist);\n                }\n            });\n        }\n\n        let len = mapPoints.size\n        let lat: number[] = new Array<number>(len);\n        let lon: number[] = new Array<number>(len);\n        let data: number[] = new Array<number>(len);\n\n        var index = 0\n        mapPoints.forEach(point => {\n            lat[index] = point.lat;\n            lon[index] = point.lon;\n            data[index] = point.data;\n\n            index++;\n        })\n\n        if (this.debug) {\n            console.log(this.ident, 'map points', mapPoints, 'data', data);\n            console.log(this.ident, 'graph points', graphPoints);\n        }\n\n        var maxHour: number = 24;\n        graphPoints.forEach((_pointVal, pointKey) => {\n            if (maxHour < pointKey) {\n                maxHour = pointKey\n            }\n        });\n\n        len = maxHour + 1\n        let X: number[] = new Array<number>(len).map(() => 0)\n        let Y: number[] = new Array<number>(len).map(() => 0)\n        let opacity: number[] = new Array<number>(len).map(() => 0)\n        for (var i = 0; i < len; i++) {\n            X[i] = i\n            Y[i] = 0\n            opacity[i] = 1\n        }\n\n        graphPoints.forEach((pointVal, pointKey) => {\n            if (!xValueFilter(pointKey)) {\n                opacity[pointKey] = 0.4\n            }6\n            Y[pointKey] = pointVal\n        })\n\n        let Ynormalized = dataTransformator.normalize(Y, 20, 50)\n        let barTrace = {\n            x: X,\n            y: Ynormalized,\n            type: 'bar',\n            marker: { opacity: opacity },\n            text: Y,\n        }\n\n        let normalizedData = dataTransformator.normalize(data, 20, 50)\n        let mapTrace = {\n            type: 'scattermapbox',\n            lon: lon,\n            lat: lat,\n            opacity: 0.6,\n            marker: { size: normalizedData },\n            text: data,\n        }\n\n        return Object({\n            mapTrace,\n            barTrace,\n            allColumnNames\n        })\n    }\n\n    static toTraces(dataSet, dataColumnNames) {\n        if (this.debug) {\n            console.log(this.ident, 'whole dataSet', dataSet);\n            console.log(this.ident, 'data columns', dataColumnNames);\n        }\n\n        let series = new Map<string, Trace>();\n        let sortedSeries: Trace[] = [];\n        var allColumnNames = \"\";\n\n        if (dataSet.rows && dataSet.rows.length > 0) {\n            allColumnNames = dataSet.columns.map((r: { text: string; }) => r.text).join(' ')\n\n            let traceDataColumn = 2;\n            let xValueColumn = 1;\n            let yValueColumn = 3;\n\n            dataSet.columns.forEach((row, index) => {\n                if (row.text == dataColumnNames.xColumn) {\n                    xValueColumn = index\n                }\n                if (row.text == dataColumnNames.yColumn) {\n                    yValueColumn = index\n                }\n                if (row.text == dataColumnNames.dataColumn) {\n                    traceDataColumn = index\n                }\n            })\n\n            let sortedRows = dataSet.rows.sort((obj1: any[], obj2: any[]) => {\n                let obj1order: number = Number(obj1[xValueColumn])\n                let obj2order: number = Number(obj2[xValueColumn])\n\n                if (obj1order > obj2order) {\n                    return 1;\n                }\n\n                if (obj1order < obj2order) {\n                    return -1;\n                }\n\n                return 0;\n            });\n\n            sortedRows.forEach(dbRequestRow => {\n                let traceName = dbRequestRow[traceDataColumn];\n                let traceX: number = Number(dbRequestRow[xValueColumn]);\n                let traceY: number = Number(dbRequestRow[yValueColumn]);\n\n                if (dataColumnNames.xColumn == 'Time') {\n                    let xdate = new Date(dbRequestRow[xValueColumn])\n                    traceX = xdate.getHours()\n                }\n\n                let trace = series.get(traceName);\n                if (!trace) {\n                    trace = new Trace();\n                    trace.name = traceName;\n                    series.set(traceName, trace);\n                }\n\n                // to keep order\n                let prevTraceX: number = trace.x[trace.x.length - 1];\n                if (traceX <= prevTraceX) {\n                    traceX = prevTraceX + 1;\n                }\n\n                trace.x.push(traceX);\n                trace.y.push(traceY);\n            })\n\n            sortedSeries = Array.from(series.values()).sort((s1: Trace, s2: Trace) => {\n                return s1.name.localeCompare(s2.name, undefined, { numeric: true })\n            });\n        }\n\n        if (this.debug) {\n            console.log(this.ident, 'sorted series', sortedSeries);\n        }\n\n        return Object({\n            sortedSeries,\n            allColumnNames\n        })\n    }\n}","export class Trace{\n    public name: string = \"\";\n    public x : number[] = [];\n    public y: number[] = [];\n}"],"sourceRoot":""}