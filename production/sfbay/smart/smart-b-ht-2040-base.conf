
include "smart-b-hightech-2040.conf"

beam.agentsim.simulationName = "hl-pooling-study-paper/batch1/base4"
beam.agentsim.lastIteration = 15

#beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.01

// ridehail supply
beam.agentsim.agents.rideHail.initialization.procedural.fractionOfInitialVehicleFleet = 0.033 ## variable

// allocation manager
beam.agentsim.agents.rideHail.allocationManager.name="POOLING_ALONSO_MORA"
beam.agentsim.agents.rideHail.allocationManager.requestBufferTimeoutInSeconds = 300
beam.agentsim.agents.rideHail.allocationManager.matchingAlgorithm = "ASYNC_GREEDY_VEHICLE_CENTRIC_MATCHING"
beam.agentsim.agents.rideHail.allocationManager.maxWaitingTimeInSec = 1200 ## variable
beam.agentsim.agents.rideHail.allocationManager.maxExcessRideTime = 0.5 ## variable
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.maxRequestsPerVehicle = 4
// repositioning manager
beam.agentsim.agents.rideHail.repositioningManager.name="INVERSE_SQUARE_DISTANCE_REPOSITIONING_FACTOR"
beam.agentsim.agents.rideHail.repositioningManager.inverseSquareDistanceRepositioningFactor.sensitivityOfRepositioningToDemand = 0.2 ## variable
beam.agentsim.agents.rideHail.repositioningManager.inverseSquareDistanceRepositioningFactor.sensitivityOfRepositioningToDistance = 0.88668
beam.agentsim.agents.rideHail.repositioningManager.inverseSquareDistanceRepositioningFactor.predictionHorizon = 3600
// skimmer
beam.router.skim = {
  h3Resolution = 6
  keepKLatestSkims = 1
  writeSkimsInterval = 5
  writeAggregatedSkimsInterval = 5
  travel-time-skimmer {
    name = "travel-time-skimmer"
    fileBaseName = "skimsTravelTimeObservedVsSimulated"
  }
  origin_destination_skimmer {
    name = "od-skimmer"
    fileBaseName = "skimsOD"
    writeAllModeSkimsForPeakNonPeakPeriodsInterval = 0
    writeFullSkimsInterval = 0
  }
  taz-skimmer {
    name = "taz-skimmer"
    fileBaseName = "skimsTAZ"
  }
}

beam.debug.debugEnabled = true
beam.debug.actor.logDepth = 15
beam.debug.stuckAgentDetection.enabled = true

## Energy conservation
beam.sim.termination.criterionName = "TerminateAtFixedIterationNumber"
beam.sim.termination.terminateAtRideHailFleetStoredElectricityConvergence.minLastIteration = 0
beam.sim.termination.terminateAtRideHailFleetStoredElectricityConvergence.maxLastIteration = 0
beam.sim.termination.terminateAtRideHailFleetStoredElectricityConvergence.relativeTolerance = 0.01

beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters = 16000
beam.agentsim.agents.rideHail.allocationManager.pooledRideHailIntervalAsMultipleOfSoloRideHail = 1
; beam.agentsim.agents.rideHail.linkFleetStateAcrossIterations = false


; beam.agentsim.agents.rideHail.human.refuelRequiredThresholdInMeters = 32180.0 # 20 miles
; beam.agentsim.agents.rideHail.human.noRefuelThresholdInMeters = 128720.0 # 80 miles
; beam.agentsim.agents.rideHail.cav.refuelRequiredThresholdInMeters = 16090.0 # 10 miles
; beam.agentsim.agents.rideHail.cav.noRefuelThresholdInMeters = 96540.0 # 60 miles
; beam.agentsim.agents.rideHail.rangeBufferForDispatchInMeters = 10000 // do not dispatch vehicles below this range to ensure enough available to get to charger

# VEHICLE CHARGING MANAGER NAME OPTIONS:
# DefaultVehicleChargingManager, NoChargingManager
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.name = "DefaultVehicleChargingManager"
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.defaultVehicleChargingManager.noChargingThresholdExpirationTimeInS = "int | 0"
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.defaultVehicleChargingManager.mulitnomialLogit.params.drivingTimeMultiplier = "double | -0.01666667" // one minute of driving is one util
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.defaultVehicleChargingManager.mulitnomialLogit.params.queueingTimeMultiplier = "double | -0.01666667" // one minute of queueing is one util
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.defaultVehicleChargingManager.mulitnomialLogit.params.chargingTimeMultiplier = "double | -0.01666667" // one minute of charging is one util
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.defaultVehicleChargingManager.mulitnomialLogit.params.insufficientRangeMultiplier = "double | -60.0" // indicator variable so straight 60 minute penalty if out of range
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.defaultVehicleChargingManager.fractionAvailableThresholdToFavorFasterCharging = "double | 1.01" // by default, always prioritize faster charging

# Depot manager options: SeparateParkingZoneStrategy
; beam.agentsim.agents.rideHail.charging.vehicleChargingManager.depotManager.stallAssignmentStrategy.name = "SeparateParkingZoneStrategy"



